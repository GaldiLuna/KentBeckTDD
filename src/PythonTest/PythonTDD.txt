# TESTE QUE VERIFICA SE UM MÉTODO FOI CHAMADO RETORNANDO TRUE OU FALSE
# CLASSE DO TESTE
class TestCaseTest(TestCase):
  def setUp(self):
    self.result = TestResult()

  def testRunning(self):
    self.test.run()
    assert(self.test.wasRun)

TestCaseTest("testRunning").run()

  def testTemplateMethod(self):
    test = WasRun("testMethod")
    test.run(self.result)
    assert("setUp testMethod tearDown " == test.log)

  def testSetUp(self):
    self.test.run()
    assert("setUp testMethod " == self.test.log)

  def testResult(self):
    test = WasRun("testMethod")
    test.run(self.result)
    assert("1 run, 0 failed" == self.result.summary())

  def testFailedResult(self):
    test = WasRun("testBrokenMethod")
    test.run(self.result)
    assert("1 run, 1 failed" == self.result.summary())

  def testFailedResultFormatting(self):
    self.result.testStarted()
    self.result.testFailed()
    assert("1 run, 1 failed" == self.result.summary())

  def testSuite(self):
    suite = TestSuite()
    suite.add(WasRun("testMethod"))
    suite.add(WasRun("testBrokenMethod"))
    suite.run(self.result)
    assert("2 run, 1 failed" == self.result.summary())

# CLASSE DE APOIO AO TESTE
class TestResult:
  def __init__(self):
    self.runCount = 0
    self.errorCount = 0

  def testStarted(self):
    self.runCount = self.runCount + 1

  def summary(self):
    return "%d run, %d failed" % (self.runCount, self.failureCount)

# SUPER CLASSE
class TestCase(object):
  def __init__(self, name):
    self.name = name

  def run(self, result):
    result.testStarted()
    self.setUp()
    try:
      exec "self." + self.name + "()"
    except:
      result.testFailed()
    self.tearDown()

  def setUp(self):
    pass

  def tearDown(self):
    pass

# CLASSE PARA A EXECUÇÃO DO TESTE
class WasRun(TestCase):
  def __init__(self, name):
    self.wasRun = None
    TestCase.__init__(self, name)

  def setUp(self):
    self.log = "setUp "

  def tearDown(self):
    self.log = self.log + "tearDown "

#FUNÇÕES PARA EXECUTAR O TESTE
  def testMethod(self):
    self.log = self.log + "testMethod "

  def testBrokenMethod(self):
    raise Exception

# CLASSE SUITE PARA CHAMADA DE TODOS OS TESTES
class TestSuite:
  def __init__(self):
    self.tests = []

  def add(self, test):
    self.tests.append(test)

  def run(self, result):
    for test in tests:
      test.run(result)

# CHAMADAS PRINTS INVOCANDO TODOS OS TESTES
suite = TestSuite()
suite.add(TestCaseTest("testTemplateMethod"))
suite.add(TestCaseTest("testResult"))
suite.add(TestCaseTest("testFailedResultFormatting"))
suite.add(TestCaseTest("testFailedResult"))
suite.add(TestCaseTest("testSuite"))
result = TestResult()
suite.run(result)
print result.summary()